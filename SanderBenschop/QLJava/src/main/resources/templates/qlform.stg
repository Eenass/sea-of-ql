form(statements) ::= <<
    <form>
        $statements$
    </form>
>>

openQuestionHtml(id, labelText) ::= <<
    <label for="$id$">$labelText$</label><input type="text" id="$id$" name="$id$"/><br>
>>

closedQuestionHtml(id, labelText) ::= <<
    <label for="$id$">$labelText$</label><input type="checkbox" id="$id$" name="$id$"/><br>
>>

questionJS(id, controllerType) ::= <<
    var $id$QuestionController = ql.$controllerType$.new("$id$");
    $id$QuestionController.bind();
    ql.questionControllerList.push($id$QuestionController);
>>

computationHtml(id, labelText) ::= <<
    <label for="$id$">$labelText$</label><input type="text" id="$id$" name="$id$" readonly="readonly"/><br>
>>

computationJS(name, variableSubscriptions, expression) ::= <<
    var $name$ComputationController = ql.ComputationController.extend({
        initialize : function(name) {
            ql.ComputationController.initialize.call(this, name);
            $variableSubscriptions$
        },

        evaluateExpression : function() {
            return $expression$;
        }
    }).new("$name$");
>>

ifStatementHtml(identifier, successBodyContent) :: <<
    <div id="conditional_$identifier$">
        <div class="successBody hidden">
            $successBodyContent$
        </div>
    </div>
>>

ifElseStatementHtml(identifier, successBodyContent, failureBodyContent) :: <<
    <div id="conditional_$identifier$">
        <div class="successBody hidden">
            $successBodyContent$
        </div>
        <div class="failureBody hidden">
            $failureBodyContent$
        </div>
    </div>
>>

conditionalJS(identifier, parentController, variableSubscriptions, expression) ::= <<
    var $identifier$ConditionalController = $parentController$.extend({
        initialize : function(identifier) {
            $parentController$.initialize.call(this, identifier);
            $variableSubscriptions$
        },

        evaluateExpression : function() {
            return $expression$;
        }
    }).new("conditional_$identifier$");
>>

positive(expr) ::= <<Math.abs($expr$);>>
negative(expr) ::= <<-$expr$>>
not(expr) ::= <<!$expr$>>

multiply(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ * $rightHandSideExpr$>>
divide(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ / $rightHandSideExpr$>>
subtract(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ - $rightHandSideExpr$>>
add(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ + $rightHandSideExpr$>>

and(leftHandSideBoolExpr, rightHandSideBoolExpr) ::= <<$leftHandSideBoolExpr$ && $rightHandSideBoolExpr$>>
or(leftHandSideBoolExpr, rightHandSideBoolExpr) ::= <<$leftHandSideBoolExpr$ || $rightHandSideBoolExpr$>>

equalTo(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ === $rightHandSideExpr$>>
notEqualTo(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ !== $rightHandSideExpr$>>

greaterThan(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ > $rightHandSideExpr$>>
greaterThanOrEqualTo(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ >= $rightHandSideExpr$>>
lessThan(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ < $rightHandSideExpr$>>
lessThanOrEqualTo(leftHandSideExpr, rightHandSideExpr) ::= <<$leftHandSideExpr$ <= $rightHandSideExpr$>>

ident(name) ::= <<$variableMapStart()$$name$$variableMapEnd()$>>
variableMapStart() ::= <<ql.variableMap[">>
variableMapEnd() ::= <<"]>>

variableSubscription(variableName) ::= << ql.messageBus.subscribeToVariable("$variableName$", this); >>

ifStatementParentController() ::= <<ql.IfStatementController>>
ifElseStatementParentController() ::= <<ql.IfElseStatementController>>