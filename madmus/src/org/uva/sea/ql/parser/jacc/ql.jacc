%package org.uva.sea.ql.parser.jacc
%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.ASTNode
%start top

%token <Int> INT
%token <Bool> BOOL
%token <String> STRING
%token <Ident> IDENT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')' '{' '}' ':' ';'
%token FORM IF ELSE

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Expr> expr

%{
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.operators.binary.logical.*;
import org.uva.sea.ql.ast.operators.binary.numeric.*;
import org.uva.sea.ql.ast.operators.binary.relational.*;
import org.uva.sea.ql.ast.operators.unary.*;
%}

%%

 top 			: form 								{ result = $1; }
     			;

 form			: FORM IDENT '{' statement '}'   	{ $$ = new Form($2, $4); }
 				;
  		
 statement		: IF '(' expr ')' '{' statement '}' { $$ = new If($3, $6); }
	 			| question
	 			| assignment
	 			| expr
	 			;
 
 question		: STRING declaration				{ $$ = new Question($1, $2); }
	 			| STRING assignment					{ $$ = new Question($1, $2); }
	 			;
 			
 declaration	: IDENT ':' datatype				{ $$ = new Declaration($1, $2); }
 				;
 		
 assignment 	: IDENT '=' expr ';'				{ $$ = new Assignment($1, $3); }
 				;
 
 datatype		: BOOL								{ $$ = $1 }
 				| INT								{ $$ = $1 }
 				| STRING							{ $$ = $1 }
 				;		
      
 expr			: '+' expr %prec UPLUS 				{ $$ = new Pos($2); }
				| '-' expr %prec UMIN 				{ $$ = new Neg($2); }
				| '!' expr %prec UNOT 				{ $$ = new Not($2); }
				| expr '*' expr 					{ $$ = new Mul($1, $3); }
				| expr '/' expr 					{ $$ = new Div($1, $3); }
				| expr '+' expr 					{ $$ = new Add($1, $3); }
				| expr '-' expr 					{ $$ = new Sub($1, $3); }
		 		| expr EQ expr 						{ $$ = new Eq($1, $3); }
				| expr NEQ expr 					{ $$ = new NEq($1, $3); }
				| expr '>' expr 					{ $$ = new GT($1, $3); }
				| expr '<' expr 					{ $$ = new LT($1, $3); }
				| expr GEQ expr 					{ $$ = new GEq($1, $3); }
				| expr LEQ expr 					{ $$ = new LEq($1, $3); }
		 		| expr AND expr 					{ $$ = new And($1, $3); }
				| expr OR expr 						{ $$ = new Or($1, $3); }
				| INT 								{ $$ = $1; }
				| IDENT 							{ $$ = $1; }
				| '(' expr ')' 						{ $$ = $2; }
				; 



%%
private QLLexer lexer; 

private Expr result;

public Expr getResult() {
  return result;
}

public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}