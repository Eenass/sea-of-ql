%package parser
%class QLParser
%interface QLTokens
%semantic ast.ASTNode 
%start top

%token <ast.expression.value.Int> INT
%token <ast.expression.value.Money> MONEY
%token <ast.expression.value.Bool> BOOL
%token <ast.expression.value.Str> STR
%token <ast.expression.value.Ident> IDENT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')' '{' '}'
%token TRUE FALSE
%token IF ELSE

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <ast.Expression> expression

%{
import ast.Expression;
import ast.expression.binary.*;
import ast.expression.unary.*;
import ast.expression.value.*;
@SuppressWarnings("unused")
%}

%%

 top : expression { result = $1; }
     ;

 expression	 : '+' expression	%prec UPLUS { $$ = new Pos($2); }
		 | '-' expression	%prec UMIN  { $$ = new Neg($2); }
		 | '!' expression %prec UNOT  { $$ = new Not($2); }
		 | expression '*' expression		{ $$ = new Mul($1, $3); }
		 | expression '/' expression 		{ $$ = new Div($1, $3); }
		 | expression '+' expression		{ $$ = new Add($1, $3); }
		 | expression '-' expression		{ $$ = new Sub($1, $3); }
		 | expression EQ expression		    { $$ = new Eq($1, $3); }
		 | expression NEQ expression		{ $$ = new NEq($1, $3); }
		 | expression '>' expression		{ $$ = new GT($1, $3); }
		 | expression '<' expression		{ $$ = new LT($1, $3); }
		 | expression GEQ expression		{ $$ = new GEq($1, $3); }
		 | expression LEQ expression		{ $$ = new LEq($1, $3); }
		 | expression AND expression	    { $$ = new And($1, $3); }
	     | expression OR expression  		{ $$ = new Or($1, $3); }
		 | INT					{ $$ = $1; }
		 | MONEY				{ $$ = $1; }
		 | BOOL					{ $$ = $1; }
		 | STR					{ $$ = $1; }
		 | IDENT         		{ $$ = $1; }
		 | '(' expression ')'			{ $$ = $2; }
		 ;
		 

%%
private QLLexer lexer; 

private Expression result;

public Expression getResult() {
  return result;
}

public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}