%package org.uva.sea.ql.parser.jacc
%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.Node 
%start start

%token BOOLEAN INTEGER MONEY STRING
%token <Bool> BOOL
%token <Money> MON
%token <Int> INT
%token <Str> STR
%token <Ident> IDENT
%token '^' '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')' '{' '}'
%token ':'
%token TRUE FALSE
%token IF ELSE FORM

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

// data types
%type <org.uva.sea.ql.ast.type.Bool> BOOLEAN
%type <org.uva.sea.ql.ast.type.Int> INTEGER
%type <org.uva.sea.ql.ast.type.Money> MONEY
%type <org.uva.sea.ql.ast.type.Str> STRING

// AST nodes
%type <Assignment>      assignment
%type <Else>            else
%type <ElseIf>          elseif
%type <ElseIfs>         elseifs
%type <Expression>      expression
%type <FormDeclaration> form
%type <IfThenElse>      ifblock
%type <Statement>       statement
%type <Statements>      formbody ifbody statements
%type <org.uva.sea.ql.ast.type.Type> datatype
%type <VarDeclaration>  vardeclaration

%{
import org.uva.sea.ql.ast.expression.*;
import org.uva.sea.ql.ast.expression.arithmetic.*;
import org.uva.sea.ql.ast.expression.comparison.*;
import org.uva.sea.ql.ast.expression.literal.*;
import org.uva.sea.ql.ast.expression.logical.*;
import org.uva.sea.ql.ast.expression.unary.*;
import org.uva.sea.ql.ast.statement.*;
%}

%%

 start          : statement                       { result = $1; }
                ;

 statements     : statement statements             { $$ = new Statements( $1, $2 ); }
                | statement                        { $$ = new Statements( $1 ); }
                ;

 statement      : form
                | question
                | blockstatement
                | assignment
                ;

 form           : FORM IDENT '{' formbody '}'      { $$ = new FormDeclaration( $2, $4 ); }
                ;

 formbody       : statements
                ;

 question       : STR vardeclaration               { $$ = new QuestionDeclaration( $1, $2 ); }
                | STR assignment                   { $$ = new QuestionDeclaration( $1, $2 ); }
                ;

 blockstatement : ifblock
                ;

 ifbody         : formbody
                | /* empty */                      { $$ = new Statements(); }
                ;

 ifblock        : IF '(' expression ')' '{' ifbody '}' elseifs else     { $$ = new IfThenElse( $3, $6, $8, $9 ); }
                | IF '(' expression ')' '{' ifbody '}' elseifs          { $$ = new IfThenElse( $3, $6, $8 ); }
                ;

 elseifs        : elseifs elseif                                        { $$ = new ElseIfs( $2, $1 ); }
                | /* empty */                                           { $$ = new ElseIfs(); }
                ;

 elseif         : ELSE IF '(' expression ')' '{' ifbody '}'             { $$ = new ElseIf( $4, $7 ); }
                ;

 else           : ELSE '{' ifbody '}'                                   { $$ = new Else( $3 ); }
                ;

 vardeclaration : IDENT ':' datatype               { $$ = new VarDeclaration( $1, $3 ); }
                ;

 assignment     : IDENT '=' expression             { $$ = new Assignment( $1, $3 ); }
                ;

 comparison     : expression EQ expression         { $$ = new Eq( $1, $3 ); }
                | expression NEQ expression        { $$ = new NEq( $1, $3 ); }
                | expression '>' expression        { $$ = new GT( $1, $3 ); }
                | expression '<' expression        { $$ = new LT( $1, $3 ); }
                | expression GEQ expression        { $$ = new GEq( $1, $3 ); }
                | expression LEQ expression        { $$ = new LEq( $1, $3 ); }
                ;

 arithmetic     : expression '*' expression        { $$ = new Mul( $1, $3 ); }
                | expression '/' expression        { $$ = new Div( $1, $3 ); }
                | expression '+' expression        { $$ = new Add( $1, $3 ); }
                | expression '-' expression        { $$ = new Sub( $1, $3 ); }
                ;

 logical        : expression AND expression        { $$ = new And( $1, $3 ); }
                | expression OR expression         { $$ = new Or( $1, $3 ); }
                ;
 
 expression     : '+' expression %prec UPLUS       { $$ = new Pos( $2 ); }
                | '-' expression %prec UMIN        { $$ = new Neg( $2 ); }
                | '!' expression %prec UNOT        { $$ = new Not( $2 ); }
                | comparison
                | arithmetic
                | logical
                | literal
                | '(' expression ')'               { $$ = $2; }
                ;

 literal        : BOOL                             { $$ = $1; }
                | MON                              { $$ = $1; }
                | INT                              { $$ = $1; }
                | STR                              { $$ = $1; }
                | IDENT                            { $$ = $1; }
                | boolliteral                      { $$ = $1; }
                ;
                
 boolliteral    : TRUE                             { $$ = new org.uva.sea.ql.ast.expression.literal.Bool( true ); }
                | FALSE                            { $$ = new org.uva.sea.ql.ast.expression.literal.Bool( false ); }
                ;

 datatype       : BOOLEAN                          { $$ = new org.uva.sea.ql.ast.type.Bool(); }
                | MONEY                            { $$ = new org.uva.sea.ql.ast.type.Money(); }
                | INTEGER                          { $$ = new org.uva.sea.ql.ast.type.Int(); }
                | STRING                           { $$ = new org.uva.sea.ql.ast.type.Str(); }
                ;

%%
    /**
     * Holds the lexer.
     */
    private QLLexer lexer;
    
    /**
     * Holds the parsing result (AST)
     */
    private Statement result;
    
    /**
     * Retrieves the generated AST.
     *
     * @return The AST.
     */
    public Statement getResult() {
        return result;
    }
    
    /**
     * Sets the lexer.
     *
     * @param lexer
     */
    public QLParser( QLLexer lexer ) { 
        this.lexer = lexer;
    }
    
    /**
     * Output error message.
     *
     * @param msg The error message.
     */
    private void yyerror( String msg ) { 
        System.err.println( msg );
    }