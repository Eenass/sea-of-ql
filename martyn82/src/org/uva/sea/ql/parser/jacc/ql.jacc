%package org.uva.sea.ql.parser.jacc
%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.ASTNode 
%start top

%token <org.uva.sea.ql.ast.expression.value.Bool> BOOL
%token <org.uva.sea.ql.ast.expression.value.Money> MON
%token <org.uva.sea.ql.ast.expression.value.Int> INT
%token <org.uva.sea.ql.ast.expression.value.Str> STR
%token IDENT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')'

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Expression> expr

%{
import org.uva.sea.ql.ast.expression.*;
%}

%%

 top : expr { result = $1; }
     ;

 expr    : '+' expr %prec UPLUS { $$ = new Pos($2); }
         | '-' expr %prec UMIN  { $$ = new Neg($2); }
         | '!' expr %prec UNOT  { $$ = new Not($2); }
         | expr '*' expr        { $$ = new Mul($1, $3); }
         | expr '/' expr        { $$ = new Div($1, $3); }
         | expr '+' expr        { $$ = new Add($1, $3); }
         | expr '-' expr        { $$ = new Sub($1, $3); }
         | expr EQ expr         { $$ = new Eq($1, $3); }
         | expr NEQ expr        { $$ = new NEq($1, $3); }
         | expr '>' expr        { $$ = new GT($1, $3); }
         | expr '<' expr        { $$ = new LT($1, $3); }
         | expr GEQ expr        { $$ = new GEq($1, $3); }
         | expr LEQ expr        { $$ = new LEq($1, $3); }
         | expr AND expr        { $$ = new And($1, $3); }
         | expr OR expr         { $$ = new Or($1, $3); }
         | BOOL                 { $$ = $1; }
         | MON                  { $$ = $1; }
         | INT                  { $$ = $1; }
         | STR                  { $$ = $1; }
         | IDENT                { $$ = $1; }
         | '(' expr ')'         { $$ = $2; }
         ;

%%
    /**
     * Holds the lexer.
     */
    private QLLexer lexer;
    
    /**
     * Holds the parsing result (AST)
     */
    private Expression result;
    
    /**
     * Retrieves the generated AST.
     *
     * @return The AST.
     */
    public Expression getResult() {
      return result;
    }
    
    /**
     * Sets the lexer.
     *
     * @param lexer
     */
    public QLParser( QLLexer lexer ) { 
      this.lexer = lexer;
    }
    
    /**
     * Output error message.
     *
     * @param msg The error message.
     */
    private void yyerror( String msg ) { 
      System.err.println( msg );
    }