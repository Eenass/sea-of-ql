package org.uva.sea.ql.visitor;

import java.util.List;
import java.util.Map;

import org.uva.sea.ql.ast.Form;
import org.uva.sea.ql.ast.expressions.Expr;
import org.uva.sea.ql.ast.expressions.Ident;
import org.uva.sea.ql.ast.statements.BlockOfStatements;
import org.uva.sea.ql.ast.statements.ComputedQuestion;
import org.uva.sea.ql.ast.statements.Question;
import org.uva.sea.ql.ast.statements.Statement;
import org.uva.sea.ql.ast.statements.ifElseStatement;
import org.uva.sea.ql.ast.statements.ifStatement;
import org.uva.sea.ql.ast.types.Type;

public class StmtChecker implements StmtVisitor<Boolean> {
	private final Map<Ident, Type> typeEnv;
	private final List<String> errMsgs;
	private final ExprChecker exprChecker;
	
	public StmtChecker(Map<Ident, Type> typeEnv, List<String> errMsgs) {
		this.typeEnv = typeEnv;
		this.errMsgs = errMsgs;
		this.exprChecker = new ExprChecker(typeEnv, errMsgs);
	}
	
	public boolean check(Statement stmt, Map<Ident, Type> typeEnv, List<String> errMsgs) {
		return stmt.accept(this);
	}
	

	@Override
	public Boolean visit(Question stmt) {
		return checkName(stmt);		
	}

	@Override
	public Boolean visit(ComputedQuestion stmt) {
		boolean isValid = checkName(stmt);
		
		if (!checkExpr(stmt.getExpr())) {
			isValid = false;
		}
		return isValid;
	}

	@Override
	public Boolean visit(ifStatement stmt) {
		boolean isValid = checkCondition(stmt);
		
		if (!stmt.getIfStms().accept(this)) {
			isValid = false;
		}
		return isValid;
	}

	@Override
	public Boolean visit(ifElseStatement stmt) {
		boolean isValid = checkCondition(stmt);
		if (!stmt.getIfStms().accept(this)) {
			isValid = false;
		}
		if (!stmt.getElseStms().accept(this)) {
			isValid = false;
		}
		return isValid;
	}

	@Override
	public Boolean visit(BlockOfStatements stmt) {
		boolean isValid = true;
		for (Statement s: stmt.getStmts()) {
			isValid = isValid && s.accept(this);
		}
		return isValid;
	}
	
	private boolean checkName(Question stmt) {
		Ident ident = stmt.getIdent();
		
		if (typeEnv.containsKey(ident)) {
			errMsgs.add("Identifier " + ident + " has already been declared.");
			return false;
		}
		else {
			typeEnv.put(ident, stmt.getType());
			return true;
		}
		
	}
	
	private boolean checkExpr(Expr expr) {
		return exprChecker.check(expr, typeEnv, errMsgs);
	}
		
	private boolean checkCondition(ifStatement stmt) {
		boolean isValid = checkExpr(stmt.getCondition());
		
		if (!stmt.getCondition().typeOf(typeEnv).isCompatibleToBool()) {
			errMsgs.add("The condition should be boolean.");
			isValid = false;
		}
		return isValid;
	}

	@Override
	public Boolean visit(Form frm) {
		// TODO Auto-generated method stub
		return null;
	}
}