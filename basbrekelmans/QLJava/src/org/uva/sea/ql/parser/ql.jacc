%package org.uva.sea.ql.parser
%class Parser
%interface Tokens
%semantic org.uva.sea.ql.ast.Node 
%start top

//tokens
%token <NumberLiteral> NUMBERLITERAL
%token <StringLiteral> STRINGLITERAL
%token <BooleanLiteral> TRUE FALSE
%token <Identifier> IDENTIFIER
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!' '^'
%token '(' ')' '{' '}'
%token ';' ':'
%token FORM IF ELSE
%token STRING BOOLEAN MONEY INTEGER

//precedence
%left OR '^'
%left AND
%left EQ '>' '<' GEQ LEQ NEQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

//Semantic types
%type <Expression> expression simple logical comparison arithmetic
%type <Question> question
%type <Statement> statement simplestatement ifstatement
%type <Statements> statements
%type <Form> form
%type <TypeNode> type

%{
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.expressions.*;
import org.uva.sea.ql.ast.statements.*;
import org.uva.sea.ql.ast.types.*;
import org.uva.sea.ql.ICodeLocationInformation;
import java.util.ArrayList;
%}

%%

//start off with any node to enable testing expressions, statements and/or forms
top		  		: node { result = $1; }
				;
				
node	    	: expression	 { $$ = $1; }
	 		    | form			 { $$ = $1; }
	 		    | statements	 { $$ = $1; }
	 		    ; 

form  	  		: FORM IDENTIFIER '{' statements '}' { $$ = new Form(lexer.location(), $2, $4);  } 
		  		;  

statements		: statement statements 	{ $$ = chainStatements($1, $2); }
				| statement 			{ $$ = chainStatements($1); }
				;
				
statement 		: simplestatement
				| ifstatement
          		;
          		
ifstatement		: IF '(' expression ')' '{' statements '}' 							{ $$ = new If(lexer.location(), $3, $6); }
				| IF '(' expression ')' '{' statements '}' ELSE '{' statements '}' 	{ $$ = new If(lexer.location(), $3, $6, $10); }
				;
          		
simplestatement : question
                ;

question        : STRINGLITERAL IDENTIFIER ':'  type 		{ $$ = new InputQuestion(lexer.location(), $1, $2, $4.getType()); }
				| STRINGLITERAL IDENTIFIER '=' expression 	{ $$ = new ComputedQuestion(lexer.location(), $1, $2, $4); }
				;

type			: BOOLEAN { $$ = new TypeNode(lexer.location(), Type.BOOLEAN); }
				| STRING { $$ = new TypeNode(lexer.location(), Type.STRING); }
				| INTEGER { $$ = new TypeNode(lexer.location(), Type.INTEGER); }
				| MONEY { $$ = new TypeNode(lexer.location(), Type.MONEY); }
				;
							 	
expression		: unary				 { $$ = $1; }
			    | logical			 { $$ = $1; }
			    | arithmetic		 { $$ = $1; }
			    | simple			 { $$ = $1; }
			    | comparison		 { $$ = $1; }
			    | '(' expression ')' { $$ = $2; }
			    ;

comparison      : expression EQ expression		{ $$ = new Equals(lexer.location(), $1, $3); }
		 		| expression NEQ expression		{ $$ = new NotEquals(lexer.location(), $1, $3); }
			 	| expression '>' expression		{ $$ = new GreaterThan(lexer.location(), $1, $3); }
			 	| expression '<' expression		{ $$ = new LessThan(lexer.location(), $1, $3); }
			 	| expression LEQ expression		{ $$ = new LessThanOrEquals(lexer.location(), $1, $3); }
			 	;

unary    	    : '+' expression	%prec UPLUS { $$ = new UnaryPlus(lexer.location(), $2); }
			 	| '-' expression	%prec UMIN  { $$ = new UnaryMinus(lexer.location(), $2); }
			 	| '!' expression 	%prec UNOT  { $$ = new UnaryNot(lexer.location(), $2); }
			 	;

logical			: expression AND expression	    { $$ = new And(lexer.location(),$1, $3); }
			 	| expression OR expression		{ $$ = new Or(lexer.location(),$1, $3); }
			 	| expression '^' expression		{ $$ = new Xor(lexer.location(),$1, $3); }
				; 
				
arithmetic	 	: expression '*' expression		{ $$ = new Multiplication(lexer.location(), $1, $3); }
			 	| expression '/' expression 	{ $$ = new Division(lexer.location(), $1, $3); }
			 	| expression '+' expression		{ $$ = new Addition(lexer.location(), $1, $3); }
			 	| expression '-' expression		{ $$ = new Subtraction(lexer.location(), $1, $3);}
			    ;
			    
simple			: NUMBERLITERAL
			 	| STRINGLITERAL
			 	| booleanliteral						
			 	| IDENTIFIER
			 	;

booleanliteral	: TRUE { $$ = new BooleanLiteral(lexer.location(), true); }
				| FALSE { $$ = new BooleanLiteral(lexer.location(), false); }
				;


%%
private Lexer lexer; 

private Node result;

public Node getResult() {
  return result;
}

public Parser(Lexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) {
  ICodeLocationInformation info = lexer.location(); 
  System.err.println(String.format("'%s' near line %d, column %d in '%s'", msg, info.getLineNumber(), info.getColumn(), info.getFileName()));
}

private static Statement chainStatements(Statement... statements) {
		ArrayList<Statement> newStatements = new ArrayList<Statement>();	
		for (Statement s : statements) {
			if (s instanceof Statements) {
				for (Statement inner : (Statements)s) {
					newStatements.add(inner);
				}
			}
			else {
				newStatements.add(s);
			}
		}
		return new Statements(statements[0], newStatements);
	}