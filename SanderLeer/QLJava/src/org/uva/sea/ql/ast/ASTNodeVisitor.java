package org.uva.sea.ql.ast;

import org.uva.sea.ql.ast.datatype.BooleanType;
import org.uva.sea.ql.ast.datatype.IntegerType;
import org.uva.sea.ql.ast.datatype.StringType;
import org.uva.sea.ql.ast.expression.Identifier;
import org.uva.sea.ql.ast.expression.binary.Add;
import org.uva.sea.ql.ast.expression.binary.And;
import org.uva.sea.ql.ast.expression.binary.Div;
import org.uva.sea.ql.ast.expression.binary.Eq;
import org.uva.sea.ql.ast.expression.binary.GEq;
import org.uva.sea.ql.ast.expression.binary.GT;
import org.uva.sea.ql.ast.expression.binary.LEq;
import org.uva.sea.ql.ast.expression.binary.LT;
import org.uva.sea.ql.ast.expression.binary.Mul;
import org.uva.sea.ql.ast.expression.binary.NEq;
import org.uva.sea.ql.ast.expression.binary.Or;
import org.uva.sea.ql.ast.expression.binary.Sub;
import org.uva.sea.ql.ast.expression.literal.BooleanLiteral;
import org.uva.sea.ql.ast.expression.literal.IntegerLiteral;
import org.uva.sea.ql.ast.expression.literal.StringLiteral;
import org.uva.sea.ql.ast.expression.unary.Neg;
import org.uva.sea.ql.ast.expression.unary.Not;
import org.uva.sea.ql.ast.expression.unary.Pos;
import org.uva.sea.ql.ast.statement.ComputedQuestion;
import org.uva.sea.ql.ast.statement.Form;
import org.uva.sea.ql.ast.statement.IfStatement;
import org.uva.sea.ql.ast.statement.Question;
import org.uva.sea.ql.ast.statement.StatementList;

public interface ASTNodeVisitor {
	void visit(Pos node);
	void visit(Neg node);
	void visit(Not node);
	void visit(Mul node);
	void visit(Div node);
	void visit(Add node);
	void visit(Sub node);
	void visit(Eq node);
	void visit(NEq node);
	void visit(GT node);
	void visit(LT node);
	void visit(GEq node);
	void visit(LEq node);
	void visit(And node);
	void visit(Or node);
	void visit(Identifier node);
	void visit(IntegerLiteral node);
	void visit(BooleanLiteral node);
	void visit(StringLiteral node);
	void visit(Form node);
	void visit(Question node);
	void visit(ComputedQuestion node);
	void visit(StringType node);
	void visit(StatementList node);
	void visit(BooleanType node);
	void visit(IntegerType node);
	void visit(IfStatement node);
}
