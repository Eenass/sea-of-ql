package org.uva.sea.ql.renderer;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.JPanel;

import org.uva.sea.ql.ast.expression.Ident;
import org.uva.sea.ql.ast.statement.Form;
import org.uva.sea.ql.ast.types.Type;
import org.uva.sea.ql.parser.antlr.ANTLRParser;
import org.uva.sea.ql.parser.test.ParseError;
import org.uva.sea.ql.parser.typechecker.CheckStat;


public class MainQL extends JFrame {
	
	private String inputLoc;
	private String outputLoc;
	
	public MainQL(String inputLoc, String outputLoc) {
		this.inputLoc = inputLoc;
		this.outputLoc = outputLoc;
		
		startUI();
		render();
	}
	
	
	private void startUI() {
		setTitle("My QL Form");
		setSize(600, 600);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
		    public void windowClosing(WindowEvent e) {
		       createXML(getOutputLoc());
		    }
		}
		);	
	}
	
	
	private void createXML(String outputLoc) {
		
		
	}
	
	private void render() {
		State state = new State();
		ANTLRParser parser = new ANTLRParser();
		ArrayList<String> errorList = new ArrayList<String>();
		
		String source = loadFile(getInputLoc());
		
		if (source != null) {
			
			try {
				Form form = parser.parseForm(source);
				boolean check = CheckStat.check(form, new HashMap<Ident, org.uva.sea.ql.ast.types.Type>(), errorList);
				
				if(check) {
					JPanel panel = Renderer.render(form.getBody(), state);
					panel.setVisible(true);
				
					JFrame frame = new JFrame("My QL");
					//frame.setSize(400,400);
					//frame.setVisible(true);
					//frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					frame.add(panel);
					
				} else {
					
					for(int i = 0; i<errorList.size(); i++) {
						/* pop-up box for every compilation error */
						new ErrorBox(errorList.get(i));
					}
					
				}
				
				
			} catch (ParseError e) {
			
				e.printStackTrace();
			}
		}
	}

	private String loadFile(String inputLoc) {
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		File file = new File(inputLoc);
		InputStream inputStream;
		String text;
		byte[] temp;
		int read;

		try {
			inputStream = new FileInputStream(inputLoc);
			temp = new byte[1024];
			while ((read = inputStream.read(temp)) >= 0) {
				stream.write(temp, 0, read);
			}
			text = new String(stream.toByteArray());
	}


	private String getInputLoc() {
		return this.inputLoc;
	}
	
	private String getOutputLoc() {
		return this.outputLoc;
	}

	public void setVisible(boolean b) {
		// TODO Auto-generated method stub
		
	}

}
