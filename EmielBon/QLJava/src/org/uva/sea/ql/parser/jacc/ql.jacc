
// Directives section
%package org.uva.sea.ql.parser.jacc
%class QLParser 	// Change the class name from XParser to QLParser
%interface QLTokens // Change the class name from XTokens to QLTokens
%semantic org.uva.sea.ql.ast.ASTNode 
%start top

// Terminal symbol definitions
%token <Int> INT
%token <Ident> IDENT
%token <Str> STR
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token ':'
%token '(' ')'

%left ':'
%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

// Nonterminal symbol definitions 
%type <Node>       node
%type <Question>   qstn
%type <Expression> expr

// Statements that get put after the package declaration in XParser.java
%{
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.data.*;
import org.uva.sea.ql.ast.operators.logical.*;
import org.uva.sea.ql.ast.operators.numeric.*;
import org.uva.sea.ql.ast.operators.relational.*;
%}

%% // Rules section

 top     : node { result = $1; }
         ;

 node    : qstn
         | expr
         ;
		
 qstn    : IDENT ':' STR { $$ = new Question($1, $3); }
         ;
		 
 expr	 : '+' expr	%prec UPLUS { $$ = new Pos($2); }
		 | '-' expr	%prec UMIN  { $$ = new Neg($2); }
		 | '!' expr %prec UNOT  { $$ = new Not($2); }
		 | expr '*' expr		{ $$ = new Mul($1, $3); }
		 | expr '/' expr 		{ $$ = new Div($1, $3); }
		 | expr '+' expr		{ $$ = new Add($1, $3); }
		 | expr '-' expr		{ $$ = new Sub($1, $3); }
		 | expr EQ expr		    { $$ = new Eq($1, $3); }
		 | expr NEQ expr		{ $$ = new NEq($1, $3); }
		 | expr '>' expr		{ $$ = new GT($1, $3); }
		 | expr '<' expr		{ $$ = new LT($1, $3); }
		 | expr GEQ expr		{ $$ = new GEq($1, $3); }
		 | expr LEQ expr		{ $$ = new LEq($1, $3); }
		 | expr AND expr	    { $$ = new And($1, $3); }
	     | expr OR expr  		{ $$ = new Or($1, $3); }
		 | IDENT         		{ $$ = $1; }
		 | STR                  { $$ = $1; }
		 | INT                  { $$ = $1; }
		 | '(' expr ')'			{ $$ = $2; }
		 ;
		 
%% // Additional code section

private QLLexer lexer; 

private Node result;

public Node getResult() {
  return result;
}

public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}