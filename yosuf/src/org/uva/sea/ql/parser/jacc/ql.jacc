%package org.uva.sea.ql.parser.jacc
%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.ASTNode 
%start top


%token <StringValue> STRING_VAL
%token <IntegerValue> INT_VAL
%token <BooleanValue> BOOL_VAL
%token <MoneyValue> MON_VAL
%token <DataType> BOOL INT MON STR
%token <Identifier> IDENT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')' 
%token IF ELSE
%token FORM

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Expression> expr
%type <Statement> stm
%type <CompoundStatement> compound
%type <DataType> dataType

%{
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.stm.*;
import org.uva.sea.ql.ast.exp.*;
import org.uva.sea.ql.ast.type.*;
import org.uva.sea.ql.ast.value.*;

@edu.umd.cs.findbugs.annotations.SuppressWarnings(
    value="URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", 
    justification="because this class is generated.")
@SuppressWarnings("unused")
public%}

%%

expr	: '+' expr	%prec UPLUS 	{ $$ = new Positive($2); }
		| '-' expr	%prec UMIN 		{ $$ = new Negative($2); }
		| '!' expr %prec UNOT  		{ $$ = new Not($2); }
		| expr '*' expr				{ $$ = new Multiply($1, $3); }
		| expr '/' expr 			{ $$ = new Divide($1, $3); }
		| expr '+' expr				{ $$ = new Add($1, $3); }
		| expr '-' expr				{ $$ = new Substitute($1, $3); }
		| expr EQ expr		    	{ $$ = new Equals($1, $3); }
		| expr NEQ expr				{ $$ = new NotEquals($1, $3); }
		| expr '>' expr				{ $$ = new GreaterThan($1, $3); }
		| expr '<' expr				{ $$ = new SmallerThan($1, $3); }
		| expr GEQ expr				{ $$ = new GreaterOrEquals($1, $3); }
		| expr LEQ expr				{ $$ = new SmallerOrEquals($1, $3); }
		| expr AND expr	   			{ $$ = new And($1, $3); }
	    | expr OR expr  			{ $$ = new Or($1, $3); }
	    | INT_VAL					{ $$ = $1; }
		| IDENT         			{ $$ = $1; }
		| '(' expr ')'				{ $$ = $2; }
		;

dataType: BOOL 						{ $$ = new BooleanType(); }
		| INT						{ $$ = new IntegerType(); }
		| MON						{ $$ = new MoneyType(); }
		| STR						{ $$ = new StringType(); }
		;

//In order to enable testing, top returns differnt types.
top		: form						{ result = $1; }
		| expr						{ result = $1; }
		| question					{ result = $1; }
		| dataType					{ result = $1; }
		;
		
form 	: FORM IDENT '{' compound '}'	{ $$ = new Form($2, $4); }
		;
		
compound: stm 						{ $$ = new CompoundStatement($1); }
		| compound stm				{ $$ = new CompoundStatement($1, $2); }
 		; 

stm		: question					{ $$ = $1; }
    	| ifStm						{ $$ = $1; }
		;
		
question: dataType IDENT '=' STRING_VAL ';'	{ $$ = new Question($1, $2, $4); }
		| dataType IDENT '=' expr ';' 		{ $$ = new Computed($1, $2, $4); } 
		;
		
ifStm	: IF '(' expr ')' '{' compound '}'							{ $$ = new IfStatement($3, $6); }
		| IF '(' expr ')' '{' compound '}' ELSE '{' compound '}'	{ $$ = new IfElseStatement($3, $6, $10); }
		;				

%%

private QLLexer lexer; 
private ASTNode result;
private Form form;

/**
* @return 
*/
public ASTNode getResult(){
	return result;
}

/**
* @return 
*/
public Form getForm(){
	return form;
}
 
public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}