%package org.uva.sea.ql.parser.jacc
%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.ASTNode 
%start top


%token <StringLiteral> STRING_LIT
%token <IntegerLiteral> INT_LIT
%token <DataType> BOOL INT MON STR
%token IDENT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')'
%token IF
%token FORM

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Expression> expr
%type <CompoundStatement> compound

%{
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.exp.*;
%}

%%

top		: form						{ result = $1; }
		| expr						{ result = $1; }
		;
		
form 	: FORM IDENT '{' body '}'	{ $$ = new Form($4); }
		;

body	: question					{ $$ = $1; }
		| compound 					{ $$ = $1; }
		;
		
question: dType IDENT '=' STRING_LIT { $$ = new Question($1, $2, $4 ); }
		;

dType	: BOOL 				{ $$ = DataType.BOOLEAN; }
		| INT				{ $$ = DataType.INTEGER; }
		| MON				{ $$ = DataType.MONEY; }
		| STR				{ $$ = DataType.STRING; }
		;

expr	: '+' expr	%prec UPLUS { $$ = new Positive($2); }
		| '-' expr	%prec UMIN  { $$ = new Negative($2); }
		| '!' expr %prec UNOT  	{ $$ = new Not($2); }
		| expr '*' expr			{ $$ = new Multiply($1, $3); }
		| expr '/' expr 		{ $$ = new Divide($1, $3); }
		| expr '+' expr			{ $$ = new Add($1, $3); }
		| expr '-' expr			{ $$ = new Substitute($1, $3); }
		| expr EQ expr		    { $$ = new Equals($1, $3); }
		| expr NEQ expr			{ $$ = new NotEquals($1, $3); }
		| expr '>' expr			{ $$ = new GreaterThan($1, $3); }
		| expr '<' expr			{ $$ = new SmallerThan($1, $3); }
		| expr GEQ expr			{ $$ = new GreaterOrEquals($1, $3); }
		| expr LEQ expr			{ $$ = new SmallerOrEquals($1, $3); }
		| expr AND expr	   		{ $$ = new And($1, $3); }
	    | expr OR expr  		{ $$ = new Or($1, $3); }
		| INT_LIT				{ $$ = $1; }
		| IDENT         		{ $$ = $1; }
		| '(' expr ')'			{ $$ = $2; }
		;

compound: ifStm					{ $$ = new CompoundStatement($1); }
		| stm					{ $$ = $1; }
		| compound question		{ $$ = $1; }
		;

stm		: IDENT '=' expr ';'	{ $$ = new Assignment($1, $3); }
		;

ifStm	: IF '(' expr ')' '{' compound '}'		{ $$ = new IfStatement($3, $6); }
		;						

%%

private QLLexer lexer; 
private ASTNode result;

public ASTNode getResult(){
	return result;
}


public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}